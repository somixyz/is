
data <- read.csv("travel-times.csv")

summary(data)
apply(data, MARGIN = 2, FUN = function(x) length(which(x == "-")))
apply(data, MARGIN = 2, FUN = function(x) length(which(is.na(x))))
apply(data, MARGIN = 2, FUN = function(x) length(which(x == "")))
# nijedna varijabla nema NA vrednosti
# varijable FuelEconomy, GoingTo i Comments imaju prazne stringove i varijablama FUelEco i GoingTo cemo te stringove zameniti NA vrednostima
# varijablu Comments, zbog prevelikog broja needostajucih vrednosti, treba ukloniti i zbog toga necemo uklanjati nedostajuce vrednosti
# ostace privremeno radi potrebe za neki od narednih koraka

# uklanjanje nedostajucih vrednosti:
str(data)
table(data$GoingTo)
summary(data)
data$GoingTo[data$GoingTo == "" | data$GoingTo == "-"] <- NA
data$GoingTo[is.na(data$GoingTo)] <- "Work"
data$GoingTo <- as.factor(data$GoingTo)

data$DayOfWeek <- as.factor(data$DayOfWeek)
table(data$FuelEconomy)
data$FuelEconomy[data$FuelEconomy == "" | data$FuelEconomy == "-"] <- NA
length(which(is.na(data$FuelEconomy)))
data$FuelEconomy <- as.numeric(data$FuelEconomy)
class(data$FuelEconomy)
shapiro.test(data$FuelEconomy)
#s obzirom da varijabla nema N raspodelu, NA vrednosti zamenicemo medijanom varijable

medijanaFuelEco <- median(data$FuelEconomy, na.rm = TRUE)
medijanaFuelEco
data$FuelEconomy[is.na(data$FuelEconomy)] <- medijanaFuelEco

# kreiranje izlazne varijable
data$Take407All <- ifelse(data$Congestion407 < 0.61 & data$Comments == "", yes = "Yes", no = "No")
data$Take407All <- factor(data$Take407All)
data$Congestion407 <- NULL
data$Comments <- NULL
data$Date <- NULL
data$DayOfWeek <- NULL
data$StartTime <- NULL
# izbacili smo nepotrebne

str(data)

# kad sredimo podatke, kreiramo trening i test set
install.packages('caret')
library(caret)
set.seed(1010)
indexes <- createDataPartition(data$Take407All, p = 0.8, list = FALSE)
train.data <- data[indexes, ]
test.data <- data[-indexes, ]

# nakon toga, rpart u cheatsheetu
library(rpart)
tree1 <- rpart(Take407All ~ . , 
              data = train.data,
              method = "class")

# pravimo predikciju
tree1.pred <- predict(tree1, newdata = test.data, type = "class")

# pravimo konfuzionu matricu
tree1.cm <- table(true = test.data$Take407All, predicted = tree1.pred)
tree1.cm

# napisemo funkciju za evaluaciju i odradimo je na cm
# OVO MORAMO SAMI, OVO JE KAD JE YES POZITIVNA, SAMO OBRNES KAD JE NO POZITIVNA
getEvaluationMetrics <- function(cm){
  
  TP <- cm[2,2]
  TN <- cm[1,1]
  FP <- cm[1,2]
  FN <- cm[2,1]
  
  accuracy = sum(diag(cm))/sum(cm)
  precision <- TP / (TP + FP)
  recall <- TP / (TP + FN)
  F1 <- (2 * precision * recall) / (precision + recall)
  
  c(Accuracy = accuracy, 
    Precision = precision, 
    Recall = recall, 
    F1 = F1)
  
}

eval.tree1 <- getEvaluationMetrics(tree1.cm) 
eval.tree1
# accuracy = procenat tacnih predikcija
# precision = udeo onih koje smo predvideli da su pozitivne koje su stvarno pozitivne
# recall = udeo observacija koje su stvarno pozitivne koje smo predvideli da su pozitivne
# F1 = balans izmedju precision i recall

# poslednji deo cross validacija <folds> cheatsheet
library(e1071)
library(caret)
numFolds = trainControl(method = "cv", number = 10) # KREIRATI NOVO STABLO U 10 ITERACIJA PA ZATO 10
cpGrid = expand.grid(.cp = seq(from = 0.001, to = 0.05, by = 0.001)) # ovi brojevi uvek
set.seed(1010) # OVO JE JAKO BITNO PRE KROS VALIDACIJE !
crossvalidation <- train(Take407All ~ . ,
                        data = train.data,
                        method = "rpart", 
                        control = rpart.control(minsplit = 10), 
                        trControl = numFolds, 
                        tuneGrid = cpGrid) 
crossvalidation
plot(crossvalidation)

# najbolje za cp uzimamo = 0.05, pise dole

# PRUNE JE U CHEATSHEETU
tree2 <- prune(tree1, cp = 0.05)
tree2.pred <- predict(tree2, newdata = test.data, type = "class")
tree2.cm <- table(true = test.data$Take407All, predicted = tree2.pred) # OVO NEMA U CHEATSHEETU
eval.tree2 <- getEvaluationMetrics(tree2.cm)

eval.tree1
eval.tree2
data.frame(rbind(eval.tree1, eval.tree2), row.names = c("prvi","drugi"))

# komentari kako se promenilo nesto
# ovo je napisala Lidija: #komentar : prvi model je savrsen ali to je nerealno





